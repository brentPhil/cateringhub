-- Create custom types for roles and permissions
CREATE TYPE public.app_role AS ENUM ('user', 'admin', 'superadmin');
CREATE TYPE public.app_permission AS ENUM (
  'dashboard.access',
  'users.read',
  'users.write',
  'users.delete',
  'settings.read',
  'settings.write'
);

-- Create profiles table that extends the auth.users table
CREATE TABLE public.profiles (
  id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
  full_name TEXT,
  avatar_url TEXT,
  updated_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Create user_roles table to track user roles
CREATE TABLE public.user_roles (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  role app_role NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  UNIQUE (user_id, role)
);

-- Create role_permissions table to define which permissions each role has
CREATE TABLE public.role_permissions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  role app_role NOT NULL,
  permission app_permission NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  UNIQUE (role, permission)
);

-- Insert default role permissions
INSERT INTO public.role_permissions (role, permission) VALUES
  -- Superadmin permissions (all permissions)
  ('superadmin', 'dashboard.access'),
  ('superadmin', 'users.read'),
  ('superadmin', 'users.write'),
  ('superadmin', 'users.delete'),
  ('superadmin', 'settings.read'),
  ('superadmin', 'settings.write'),
  
  -- Admin permissions (most permissions, but limited)
  ('admin', 'dashboard.access'),
  ('admin', 'users.read'),
  ('admin', 'users.write'),
  ('admin', 'settings.read'),
  
  -- Regular user permissions (limited access)
  ('user', 'dashboard.access');

-- Create function to check if a user has a specific permission
CREATE OR REPLACE FUNCTION public.has_permission(
  requested_permission app_permission
) RETURNS BOOLEAN AS $$
DECLARE
  bind_permissions INT;
  user_role public.app_role;
BEGIN
  -- Get the user's role from JWT claims
  SELECT (auth.jwt() ->> 'user_role')::public.app_role INTO user_role;
  
  -- Count matching permissions for the user's role
  SELECT COUNT(*)
  INTO bind_permissions
  FROM public.role_permissions
  WHERE role_permissions.permission = requested_permission
    AND role_permissions.role = user_role;
    
  RETURN bind_permissions > 0;
END;
$$ LANGUAGE plpgsql STABLE SECURITY DEFINER;

-- Create function to set user role in JWT claims
CREATE OR REPLACE FUNCTION public.handle_new_user() 
RETURNS TRIGGER AS $$
BEGIN
  -- Insert into public.profiles
  INSERT INTO public.profiles (id, full_name, avatar_url, updated_at)
  VALUES (NEW.id, NEW.raw_user_meta_data->>'full_name', NULL, NOW());
  
  -- Assign default 'user' role
  INSERT INTO public.user_roles (user_id, role)
  VALUES (NEW.id, 'user');
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to handle new user registration
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Create custom access token hook to add role to JWT
CREATE OR REPLACE FUNCTION public.custom_access_token_hook(event JSONB)
RETURNS JSONB
LANGUAGE plpgsql
STABLE
AS $$
DECLARE
  claims JSONB;
  user_role public.app_role;
BEGIN
  -- Fetch the user role from the user_roles table
  SELECT role INTO user_role 
  FROM public.user_roles 
  WHERE user_id = (event->>'user_id')::UUID;
  
  claims := event->'claims';
  
  IF user_role IS NOT NULL THEN
    -- Set the claim
    claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
  ELSE
    claims := jsonb_set(claims, '{user_role}', '"user"');
  END IF;
  
  -- Update the 'claims' object in the original event
  event := jsonb_set(event, '{claims}', claims);
  
  -- Return the modified event
  RETURN event;
END;
$$;

-- Set up RLS (Row Level Security) policies
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.role_permissions ENABLE ROW LEVEL SECURITY;

-- Profiles policies
CREATE POLICY "Users can view their own profile"
  ON public.profiles FOR SELECT
  USING (auth.uid() = id);

CREATE POLICY "Users can update their own profile"
  ON public.profiles FOR UPDATE
  USING (auth.uid() = id);

-- Allow admins and superadmins to view all profiles
CREATE POLICY "Admins can view all profiles"
  ON public.profiles FOR SELECT
  USING (has_permission('users.read'));

-- Allow superadmins to update any profile
CREATE POLICY "Superadmins can update any profile"
  ON public.profiles FOR UPDATE
  USING (has_permission('users.write'));

-- User roles policies
CREATE POLICY "Users can view their own roles"
  ON public.user_roles FOR SELECT
  USING (auth.uid() = user_id);

-- Allow admins and superadmins to view all user roles
CREATE POLICY "Admins can view all user roles"
  ON public.user_roles FOR SELECT
  USING (has_permission('users.read'));

-- Allow superadmins to manage user roles
CREATE POLICY "Superadmins can manage user roles"
  ON public.user_roles FOR ALL
  USING (has_permission('users.write'));

-- Role permissions policies
CREATE POLICY "All authenticated users can view role permissions"
  ON public.role_permissions FOR SELECT
  TO authenticated
  USING (true);

-- Allow superadmins to manage role permissions
CREATE POLICY "Superadmins can manage role permissions"
  ON public.role_permissions FOR ALL
  USING (has_permission('settings.write'));

-- Grant necessary permissions to supabase_auth_admin
GRANT USAGE ON SCHEMA public TO supabase_auth_admin;
GRANT EXECUTE ON FUNCTION public.custom_access_token_hook TO supabase_auth_admin;
GRANT ALL ON TABLE public.user_roles TO supabase_auth_admin;
GRANT ALL ON TABLE public.profiles TO supabase_auth_admin;
GRANT ALL ON TABLE public.role_permissions TO supabase_auth_admin;
